#pragma version 10

// This TEAL was generated by TEALScript v0.88.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// addData(uint64,string,string)void
*abi_route_addData:
	// data: string
	txna ApplicationArgs 3
	extract 2 0

	// key: string
	txna ApplicationArgs 2
	extract 2 0

	// box: uint64
	txna ApplicationArgs 1
	btoi

	// execute addData(uint64,string,string)void
	callsub addData
	int 1
	return

// addData(box: uint64, key: string, data: string): void
addData:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/Register.algo.ts:12
	// meta: MetaData = {
	//       key: key,
	//       data: data,
	//     }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	frame_dig -2 // key: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // data: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // meta: MetaData

	// contracts/Register.algo.ts:16
	// this.myMeta.value = meta
	byte 0x6d794d657461 // "myMeta"
	frame_dig 0 // meta: MetaData
	app_global_put

	// contracts/Register.algo.ts:17
	// assert(!this.metaData(box).exists)
	frame_dig -1 // box: uint64
	itob
	box_len
	swap
	pop
	!
	assert

	// contracts/Register.algo.ts:18
	// this.metaData(box).value = meta
	frame_dig -1 // box: uint64
	itob
	dup
	box_del
	pop
	frame_dig 0 // meta: MetaData
	box_put
	retsub

// getData(uint64)(string,string)
*abi_route_getData:
	// The ABI return prefix
	byte 0x151f7c75

	// box: uint64
	txna ApplicationArgs 1
	btoi

	// execute getData(uint64)(string,string)
	callsub getData
	concat
	log
	int 1
	return

// getData(box: uint64): MetaData
getData:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/Register.algo.ts:22
	// meta = this.metaData(box).value
	frame_dig -1 // box: uint64
	itob
	frame_bury 0 // storage key//meta

	// contracts/Register.algo.ts:23
	// return meta;
	frame_dig 0 // storage key//meta
	box_get
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "addData(uint64,string,string)void"
	method "getData(uint64)(string,string)"
	txna ApplicationArgs 0
	match *abi_route_addData *abi_route_getData
	err

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub